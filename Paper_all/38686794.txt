https://doi.org/10.1093/nar/gkae314
BGCFlow: systematic pangenome workflow for the analysis of biosynthetic gene clusters across large genomic datasets 
Abstract
Genome mining is revolutionizing natural products discovery efforts. The rapid increase in available genomes demands comprehensive computational platforms to effectively extract biosynthetic knowledge encoded across bacterial pangenomes. Here, we present BGCFlow, a novel systematic workflow integrating analytics for large-scale genome mining of bacterial pangenomes. BGCFlow incorporates several genome analytics and mining tools grouped into five common stages of analysis such as: (i) data selection, (ii) functional annotation, (iii) phylogenetic analysis, (iv) genome mining, and (v) comparative analysis. Furthermore, BGCFlow provides easy configuration of different projects, parallel distribution, scheduled job monitoring, an interactive database to visualize tables, exploratory Jupyter Notebooks, and customized reports. Here, we demonstrate the application of BGCFlow by investigating the phylogenetic distribution of various biosynthetic gene clusters detected across 42 genomes of the Saccharopolyspora genus, known to produce industrially important secondary/specialized metabolites. The BGCFlow-guided analysis predicted more accurate dereplication of BGCs and guided the targeted comparative analysis of selected RiPPs. The scalable, interoperable, adaptable, re-entrant, and reproducible nature of the BGCFlow will provide an effective novel way to extract the biosynthetic knowledge from the ever-growing genomic datasets of biotechnologically relevant bacterial species.
Introduction
The number of available genome sequences in public databases has exponentially increased for most bacterial species over the last decade (1). These datasets are becoming crucial for extracting functional knowledge from the diversity found across species pangenomes, the totality of genes found in available genomes of a species (2,3). Previous pangenome studies have discovered many biological features common across a particular species, with the first study appearing in 2013 and subsequently, specific associated traits to phylogenetic groups within species (4–6). Pangenome analysis has now reached the phylogenetic tree scale (3,4).
Several pangenome analyses include the investigation of biosynthetic gene clusters (BGCs) involved in producing important natural products or secondary metabolites (7–9). Many known secondary metabolites, which also are referred to as specialized metabolites, have bioactive properties, including antibiotic, antifungal, anticancer, insecticide, food preservatives, and biocontrol, with significant applications in medicinal, agriculture, and food biotechnology (10–12). Advances in genome mining have shown that most bacteria have significant genomic potential that may lead to the discovery of novel specialized/secondary metabolites with diverse bioactivities (13,14).
This biosynthetic potential varies within and across the species, as demonstrated in prior large-scale genome mining studies (7,15–20). The pangenome-wide BGC comparisons guide the selection of particular BGCs or strains for further characterization. Several genome mining tools and databases like antiSMASH (21,22), antiSMASH-DB (23), MIBiG (24), ARTS (25), BiG-SCAPE (26), BiG-SLICE (27), BiG-FAM (28) among others are routinely used to predict, search, and comprehensively analyze BGCs. However, each of these tools remains limited based on its scope and the parameters used for accurate predictions of BGC functions or similarity across BGCs. Thus, the integration of various phylogenomic, genome mining, and comparative genomics tools is becoming a central part of investigating secondary metabolite potential and their evolutionary relations across different bacterial genome datasets.
The growth in genome mining tools and available resources poses a strong need for a standardized platform that allows reproducible analyses and easy interoperability of the inputs and outputs required by each genome mining and analysis tool (13). Advances in data science workflows have been transformational in processing sequence data, running standard analytics pipelines, and readily accessing processed output reports (29,30). For example, different workflow management systems such as Snakemake (31), Nextflow (32), Cromwell (33) and others can assist in job scheduling, logging, and reporting of the key outputs (34). Further, these automated workflow managers can play a critical role in organizing the key results and data in a findable, accessible, interoperable, and reproducible (FAIR) manner assisting researchers in extracting the knowledge from the bacterial genomes efficiently (35). Recently, workflow management systems were applied to efficiently run genome assembly, annotation, or pangenome analysis pipelines (29,36–38). However, end-to-end large-scale investigation studies for secondary metabolite biosynthetic potential still require significant domain expertise.
Here, we introduce BGCflow, a versatile Snakemake workflow aimed to aid large-scale genome mining studies to comprehensively analyze the secondary metabolite potential of selected bacterial species. BGCflow integrates various genome analytics tools for organizing sample metadata, data selection, functional annotation, genome mining, phylogenetic placement, and comparative genomics. In particular, BGCFlow provides customizable, easy-to-interpret reports, visualizations, and an analytical database for downstream exploratory analysis. Further, we demonstrate the utility of BGCFlow by analyzing publicly available genomes in the genus Saccharopolyspora, a rare actinomycete known to be distributed across diverse habitats producing industrially high-value natural products like spinosyns, erythromycins, and others. We show that the BGCFlow-guided interoperable knowledge from different tools and databases can help in the targeted discovery of novel BGCs and more accurate functional clustering of BGCs.
Materials and methods
Installing and running BGCFlow using the BGCFlow wrapper
BGCFlow software environment consists of three components: (i) a snakemake workflow (https://github.com/NBChub/bgcflow), (ii) a dbt pipeline for extraction of tabular data (https://github.com/NBChub/bgcflow_dbt-duckdb) and (iii) a python command line interface called bgcflow_wrapper (https://github.com/NBChub/bgcflow_wrapper). The wrapper can be installed using PIP directly from the Python Package Index (PyPI) (pip install bgfcflow_wrapper), and has the command lines to access all of the features in BGCFlow. The BGCFlow WIKI (https://github.com/NBChub/bgcflow/wiki) contains information and documentation on installing, configuring, and running BGCFlow.
Design of the Snakemake rules for external software
As part of the Snakemake workflow, several external computational tools were selected for different stages of the analysis. In the first step, the installation guide from the individual software's repository was followed to create a conda-based environment using yaml files stored in the workflow/envs/ directory. The version of all dependencies and the main software can be changed in these environment files. For a few cases, additional rules were created for the installation, which typically involved downloading additional resources and databases. These additional resources are stored in the resources directory, and users can also provide the pre-downloaded resource directories in the main configuration yaml file. A typical script for the Snakemake rule includes paths to the conda environment, inputs and outputs of the software in the interim directory, along with the required parameters of the command line.
Customized Snakemake rules data wrangling
To seamlessly run various software included in BGCFlow, many customized rules were generated that make sure the formatting of input and output files were interoperable (Supplementary Table S2). Such data wrangling typically included rules that prepare the input formatting and process the outputs in tabular interoperable format stored in the processed directory of each project. These data-wrangling rules involved running custom Python scripts from the bgcflow Python package directory. Many of the customized rules also involved additional downstream analysis of visualizing data. On top of the main Snakemake workflow, BGCFlow also includes several sub-workflows for in depth analysis such as BGC centric comparison, evolutionary and population genetic analysis with lsaBGC (39), and other utility functions as described in Supplementary Table S3.
Visualizing Jupyter Notebook reports
Each of the major rules is supported with a templated Jupyter Notebook for exploratory analysis of the results. These templated notebooks can be run with the bgcflow build report command, which copies the template notebook from the workflow/notebooks directory to the processed directory of each project. These template notebooks are meant to be a starting point for exploratory analysis and thus can be edited and expanded for each project. The notebooks are then converted to MkDocs reports corresponding to each rule, which can be served as interactive web server using the command bgcflow serve –project. The online server provides navigation of the interactive reports for each rule. The reports are also connected to the main results and tables, providing options for downloads for downstream exploration. For example, the rules for antiSMASH, BiG-SCAPE, and BiG-SLICE provide links to HTML reports provided by these individual tools.
Exporting results tables in OLAP database
Once the BGCFlow run is complete, all tables from various pipelines are stored as Apache Parquet files for efficient data storage. The command bgcflow build database enables the ability to extract, load, and transform the data into SQL databases through the use of Data Build Tools (dbt). Here, a set of SQL schemas are generated to easily interconnect BGC and genome information with other analysis and metadata for data queries (Supplementary Figure S4). By default, BGCFlow utilizes DuckDB, an embedded Online Analytical Processing (OLAP) database management system. Users can create additional data models and use other database management systems by modifying dbt profiles (https://github.com/NBChub/bgcflow_dbt-duckdb). For an interactive exploration of the database, the command bgcflow serve –metabase will start up a Metabase server, a popular business intelligence and visualization tool. The resulting database can then be synchronized to Metabase using the command bgcflow sync.
Genome mining and comparative analysis of Saccharopolyspora BGCs
This study incorporates several BGCFlow projects, defined in the PEP formats (available at Zenodo: https://doi.org/10.5281/zenodo.8018055) as follows:
PEP definition for all quality Saccharopolospora genomes
We searched for the Saccharopolyspora genus at NCBI RefSeq with filters to include all assembly levels of the complete genome, chromosome, scaffold, and contig on 25 October 2022, resulting in the list of 42 accession IDs. The sample table with these 42 accession IDs was provided in the PEP configuration initiated with the project name qc_saccharopolyspora, which aimed to carry out the quality check and taxonomic placement (Data S1). The selected BGCFlow rules for this first example PEP included: checkm, gtdbtk, seqfu, and mash. The results of the run were investigated using the Jupyter Notebooks for each rule provided in the directory data/processed/qc_saccharopolyspora/docs/ and visualized with reports using bgcflow serve –project qc_saccharopolyspora command. Based on the assembly quality, the genomes were categorized into three groups: (i) HQ (high-quality genomes of complete genome or chromosome level assembly as defined by NCBI RefSeq), (ii) MQ (medium-quality genomes with <50 contigs, N50 score higher than 100 kb) and (iii) LQ (remaining low-quality genomes) (Supplementary Figure S6, Figure 3a). The generated GTDB taxonomy definitions were used for the downstream analysis. The MASH-distance calculation was used to group 42 genomes in 7 different clusters of genomes called phylogroups in this study.
PEP definition for medium to high-quality Saccharopolospora genomes
To demonstrate full-scale BGCFlow application, we selected 26 genomes from HQ and MQ categories as defined above in the second PEP configuration initiated with the project name mq_saccharopolyspora (Data S2). For the BGCFlow run of this PEP, 19 out of the 20 available rules were selected for analysis. The results of each rule are analyzed using the custom Jupyter Notebooks stored in the directory data/processed/mq_saccharopolyspora/docs. The autoMLST-based phylogenetic tree of all 26 genomes was used for downstream investigation including phylogenetic distribution of BGCs using the ggtree R package (40). The MASH-based clustering was used to group the genomes into seven phylogroups that were used across various visualizations. The BGC comparative analysis was carried out by BiG-SLICE and BiG-SCAPE and the networks were further visualized using Plotly (Figure 4).
Enriched GCF network exploration
The enriched similarity network of BGCs were built on top of the resulting BiG-SCAPE sequence similarity network by adding nodes and edges from the result of ARTS, KnownClusterBlast, and query against BiG-FAM database using the python package networkx. MIBiG entries from KnownClusterBlast, ARTS model, and BiG-FAM models were added as nodes, while new edges were created to connect BGC nodes with the newly introduced nodes. Shannon Index (⁠
⁠) for each BiG-FAM models were calculated at the genus level, where 
 is the proportion of the 
th genus in the model. BiG-FAM models 202087, 200946, 210179, 213140, 201682, 201608, 205957, 215277, 201830 and 202082 were removed from the network based on the low percentage of the assigned top genus (<30%) and high Shannon Index. Clusters of connected components were calculated using networkx but ignoring ARTS nodes. For clusters with 
⁠, a convex hull was drawn using the package scipy spatial.
Comparison of gene cluster families
Sets of selected GCFs and BGCs were defined in a PEP format and were run using a comparative BGC analysis sub-workflow (bgcflow run –snakefile workflow/BGC) and further refined in Jupyter Notebook scripts (https://github.com/NBChub/saccharopolyspora_manuscript). The sub-workflow included specific tools for an in-depth comparison of the BGC structure of sequence alignments (Supplementary Table S3). Briefly, MMSeqs2 was used to build a protein sequence similarity network of selected BGCs, which allowed us to cluster the coding sequences into candidate Clusters of Orthologous Groups of proteins (COGs) (41). A phylogenetic tree was built by concatenated alignment of single-copy orthologs which are conserved across all selected BGCs using Seqkit (42) and IQTree (43). The resulting phylogenetic tree and sequence similarity network are then visualized using the R package GGGenomes (https://github.com/thackl/gggenomes) (44) and GGTree (40). The gene comparison was enriched with CBlaster hits (45) to a selected reference BGCs and links between genes are made using CLinker (46). Multiple sequence alignments of the candidate precursor peptides are built using Clustal Omega (47) and visualized using the GGMSA R package (48).
Results
Integrated components of BGCFlow present a novel platform to efficiently explore BGC potential across genomes
BGCFlow allows users to collect, organize, explore, and visualize the BGC potential of a large set of genomes either directly collected from the public database (e.g. NCBI (49), PATRIC (50)) or custom-assembled genomes from internal sources. The workflow consists of five different components: (i) Snakemake workflow to manage the data files and integrate the execution of the different bioinformatic tools for genome and BGC analysis, (ii) project management with efficient configuration of samples and rules, (iii) job scheduling and monitoring, (iv) analytics database for storing key information, and (v) Jupyter-based notebooks for reproducible reports, analysis, and visualization (Figure 1). These five components also represent the command line options provided in the BGCFlow wrapper, such as deploy, init, run, build and serve.
The main component of BGCFlow includes running a set of well-established genome mining and analysis tools allowing the integration of biosynthetic knowledge provided by different resources. These various existing genome and BGC analysis tools are packaged as configurable Snakemake rules that can select for commonly deployed stages of genome mining studies (Figure 1A). Additional customized rules were added to create seamless interoperability across these various programs. In general, the individual rules carry out functions such as input data curation, data wrangling, running external software, managing interoperability between software, and processing the results. The main workflow of BGCFlow contains about 70 Snakemake rules (Figure 2B, Supplementary Table S2), whereas 20 (Supplementary Table S1) of these can be selected from the configuration to run any of the analyses.
Large-scale studies also include reanalyzing subsets of the initial dataset with different pipelines, leading to multiple projects within a study. For example, when selecting a dataset to build a pangenome, the size of genome samples in the project may change after running the filtering stage based on genome quality or taxonomic placements. To aid in managing sample datasets across multiple projects or studies, we adopted the Portable Encapsulated Project (PEP) specification (51) (Figure 1B, Supplementary Figure S1). PEP enables users to easily define the project and input configuration via human-readable ‘.yaml’ files for each project and subproject. A typical project configuration includes a path to the table containing a list of sample datasets (e.g. a list of NCBI accession identifiers) as the input, a description of the project, selection of the pipelines to be run by setting the value into TRUE or FALSE. The configuration also allows users to include predefined taxonomic classification results from GTDB-Tk (52) and a list of well-curated GenBank annotations to improve gene annotation while running Prokka (53). BGCFlow can then read multiple PEPs and efficiently assign appropriate computational resources to a selected list of jobs using the Snakemake workflow manager (31). Following Snakemake's best practices, users can use the dry-run function to get an overview of the number of planned jobs in the current analysis before executing the workflow. The set threads for each rule can be optimized and changed further by users through the Snakemake profile configuration file. Once the Snakemake run is started, BGCFlow monitors the progress across various jobs on a live server using Panoptes (https://github.com/panoptes-organization/panoptes) (Figure 1C, Supplementary Figure S2).
A major limitation of many bioinformatics workflows is the lack of interoperability between different tools and analyses. BGCFlow provides an effective solution for investigating the BGCs spread across the dataset by integrating various bioinformatics tools for genomic analyses. After completing all analysis pipelines, the essential data tables are extracted, loaded, and transformed using the data build tool (dbt) (https://www.getdbt.com/) into a database of choice (Figure 1D, Supplementary Figure S3). By default, BGCFlow utilizes DuckDB as a database. DuckDB is an embedded online analytical processing (OLAP) database suited to handle large volumes of data with complex queries (54). To allow easy interaction with the database, users can leverage Business Intelligence tools, such as Metabase (https://www.metabase.com/), for exploratory data analysis and perform interactive SQL queries. Such a platform provides a user-friendly graphical user interface (GUI) to query and visualize the output for downstream scientific investigation. Finally, BGCFlow provides reproducible Jupyter Notebooks for analyzing critical results for each pipeline, enabling customizable data storytelling for users. Using MkDocs (https://www.mkdocs.org/), the standard notebooks are then served as static HTML reports via markdown, inspired by other attempts at reproducible reporting, such as the work of Yang et al. (55) and the reproducible reports with MkDocs blog from Tim Vink (https://timvink.nl/blog/reproducible-reports-with-mkdocs/) (Figure 1E, Supplementary Figure S4). With these five components, BGCFlow can significantly assist users in efficiently carrying out large-scale end-to-end exploration of BGCs across bacterial species of interest. In particular, the adaptable and re-entrant nature of the workflow allows users to reenter any stage of the analysis for a selected subset of genomes and tools for more focused exploratory analysis.
BGCFlow automates common analysis stages of large-scale genome mining studies
A common aim in large-scale genome mining studies is to estimate the biosynthetic potential of strain collection and subsequently prioritize strains or BGCs of interest. Such analysis typically involves various stages, including data selection, functional annotation, genome mining, phylogenetic placement, and comparative analysis. Here, we describe these common analysis stages and their automation using various BGCFlow rules (Figure 2). We note that these stages are not always linear but typically involve cyclic logic for analysis.
Data selection based on genome quality and phylogenetic placement
In comparative genome mining analysis, selecting input datasets based on assembly quality and the phylogenetic group is crucial. Many types of BGCs contain repetitive sequence elements, which makes them hard to assemble and causes contig breaks. Thus, genome mining tools such as antiSMASH have the best accuracy with high-quality genomes as an input to capture complete BGCs (21). The data selection stage can be initiated by defining a starting dataset via PEP configuration (Supplementary Figure S1), which is a ‘yaml’ object file pointing to a sample table containing a list of user-provided genome fasta filenames or public NCBI/PATRIC accession identifiers (as ‘.csv’ formatted table file). Several pipelines can then be run to give an overview of the genome sample quality. The seqfu rule of BGCFlow runs Seqfu2 (56) to give a quick overview of assembly statistics such as total genome length, number of contigs, and N50 score. Moreover, the included checkm rule's contamination and completeness results are useful for filtering lower-quality genomes, especially if the study includes metagenome-assembled genomes (57–59). In a few cases, the number of BGCs detected on the contig edge in antiSMASH can also be used as an additional quality filter before running a comparative analysis of BGCs (this would require the antismash rule to have been executed).
An appropriate selection of genomes within or across the phylogenetic clades is important in the comparative analysis of BGCs distributed across species or genera. BGCFlow incorporates rules to retrieve taxonomic assignments from GTDB (60) for available genomes in the database. Whereas the GTDB-Tk (52) rule can also assign taxonomy locally for custom genomes. For more specific and customized grouping of input genomes into different phylogroup estimates, we provide the options to calculate MASH (61) and FastANI-based (62) genomic distances across the dataset. A typical PEP for this stage includes a pipeline with the selected rules from seqfu, gtdbtk, mash and fastani. In summary, BGCFlow enables users to iterate over the data selection process using different PEPs with different sample sizes and rules.
Consistent functional annotation of the genomes
The consistent gene calling and annotation process across the project ensures that the data are comparable, especially when combining data from multiple sources. Once the input dataset is selected for a particular analysis project, BGCFlow provides a custom annotation rule for Prokka (53) that uses prodigal (63) for gene finding. In particular, the configuration also supports the option for a user-provided list of well-annotated reference genomes of specific species as a priority to annotate while running Prokka. This approach to prioritizing well-annotated genomes is useful for having better species-specific annotations. The GenBank files generated in BGCFlow also add metadata on the time of data generation and the BGCFlow version used.
For extensive functional annotation, BGCFlow can run EggNOG-mapper (64) to predict ortholog groups based on HMM profiles. These extensive annotations include predicted orthologous genes from SEED (65), eggNOG (66), COG (67), GO (68), KEGG (69), and other databases. The classification of genes in COG categories is beneficial for assessing the genomic distribution across biological subsystems. Using the eggNOG rule in combination with Roary (70), which reconstructs the pangenome, provides an overview of the functional content of the entire pangenome of the given species in the project.
The number of functional annotation tools is easily expandable in the BGCFlow framework, as demonstrated by the inclusion of a specialized deep learning-based transcription factor prediction rule for deepTFactor (71). Finally, using the cblaster rule, it is also possible to generate a nonredundant DIAMOND database (72) of all gene sequences (nucleotide or protein), which can then be used to query particular genes or gene clusters across the project (45). This analysis stage can include a pipeline with the selected rules such as prokka, eggnog (or eggnog-roary), deeptfactor (or deeptfactor-roary), and cblaster-genome. Thus, BGCFlow enables users to easily access the various functional annotations across all genomes to increase interoperability in the analysis.
Phylogenetic analysis
One of the common questions in genome mining studies is to investigate the phylogenetic placement of the BGCs across or within species. As described earlier, the data selection stage also considers the taxonomic placement of genomes using GTDB or custom phylogroup placement using MASH or FastANI (52,61,62). A more detailed phylogenetic tree can also be reconstructed using autoMLST based on multi-locus sequence analysis of a few conserved genes with functions (30 by default with a maximum of 100) (73). The autoMLST tree provides a reference for studying the BGC distribution across the project. The template Jupyter Notebook provides basic tree visualization using ggtree (40) and a guide to extract tables for external visualization using iTOL (74). Users can always use the output in Newick format and various BGC metadata tables to visualize the results in other tools. Alternatively, the pangenome rule of running Roary provides a tree based on the alignment of genes in the core genome (70). This analysis stage provides essential data for studying the evolutionary relationships of BGCs across species or genera.
Genome mining and overview of BGCs
This pivotal stage of BGCFlow includes rules to identify and analyze the BGCs across the project. More than 70 types of BGCs can be detected using antiSMASH (version 6 or version 7) for detailed investigation (21,22). In addition to running antiSMASH on all genomes, we also provide summary tables that help get the overview of the BGCs across the dataset assisting in several downstream analyses. With the help of BGCFlow reports, users can also access all of the antiSMASH results interactively on the MkDocs server. BGCFlow configures the antismash rule to run ClusterBlast and KnownClusterBlast, allowing users to search for predicted similar BGCs in the antiSMASH-DB and the MIBiG database (23,75). As an alternative, BGCFlow also incorporates GECCO for the identification of BGCs (76). This offers users the chance to utilize machine learning-based approach to detect potential BGCs that might not be detected with the antiSMASH detection rules. In addition, targeted genome mining with ARTS2 adds information on potential resistance genes and other ARTS models present in close proximity to the BGCs (25). The presence of particular resistance genes within BGC can help prioritize BGC targets with potential bioactivities such as antibiotics. Another alternative reference that is available is the BiG-FAM database, which contains ∼1.2 million BGCs from public genomes that are grouped into different gene cluster families (GCFs) (28). Using the query BiG-SLICE rule, detected BGCs in the project can be mapped to GCFs in the large BiG-FAM database (27). In general, this stage of BGCFlow allows the integration of the most popular genome mining tools and databases with interoperability between the results.
Comparative analysis of BGCs and pangenome
When comparing a large dataset of BGCs, a common approach is to dereplicate BGCs by grouping them into different GCFs, which encode similar secondary metabolites. BGCFlow supports two commonly used tools, BiG-SCAPE (26) and BiG-SLICE (27), to predict GCFs in the given dataset. In addition to the previously explained query feature, the BiG-SLICE also offers fast calculations for GCF clustering in a given dataset and is usually deployed for much larger datasets. The BiG-SCAPE is typically slower but more accurate at identifying GCFs as it uses a combined distance metric based on the organization of protein domains and sequence similarity. In several cases, an optimal scenario is to do rapid GCF clustering using BiG-SLICE followed by BiG-SCAPE on the GCFs subfamilies for the BGCs of interest. The outputs, including similarity networks, BGC, and genome metadata, can directly be imported into the network visualization tools such as Cytoscape, displaying the diversity of GCFs present in the selected dataset.
On top of GCF calculation using multiple genome mining tools, BGCFlow provides the possibility to integrate information from different genome mining tools and databases like BiG-FAM, ARTS, and MIBiG. Such an integrated approach can guide more accurate GCF definitions and targeted comparative analysis. For example, the sequence similarity network from BiG-SCAPE can be enriched to provide an information graph where detected BGCs, MIBiG entries, BiG-FAM GCF models, and ARTS model are inserted as nodes, and the edges represent the connections across these resources. By following the provided guidelines, users can further expand this network with other connections.
In addition, the cblaster (45) rule provides a database of all genes in BGCs in the project, where users can then run a BLAST search of multiple profiles to find BGCs or genes of interest. This is a handy approach for BGC prioritization by querying for BGCs with specific profiles, such as PFAMs or SMCoGs encoding for special enzymes that support the modification of secondary metabolites. Finally, studying BGCs in the pangenome context can reveal interesting features of secondary metabolites (7,9,77). BGCFlow can reconstruct the pangenome of the genomes in the project (usually for a particular species) using Roary, which clusters similar protein ORFs as orthologous groups and provides basic pangenome characteristics, including gene presence-absence matrix (70). As explained in the functional annotation stage, a combined EggNOG and Roary rule assigns the COG category and other annotations to all genes detected in the pangenome. The approaches in this stage are valuable for analyzing GCF distribution and the pangenome of the dataset, providing a guide for further prioritization of strains or BGCs. Further, we provide sub-workflows within BGCFlow that can take BGC samples as inputs to run this stage of analysis on a selected set of BGCs.
A particular study can combine some of these stages by selecting various rules in the PEP definition, where the results can be integrated using DuckDB or Jupyter Notebooks for exploratory analysis. In the next section, we will demonstrate how these stages can be easily carried out using BGCFlow for selected genomes of the Saccharopolyspora genus.
BGCFlow guided data selection and phylogenetic analysis of Saccharopolyspora spp.
As a case study, we used BGCFlow to investigate the phylogenetic distribution of BGCs across Saccharopolyspora spp. Actinomycetes are an important family of bacteria composed of several well-known secondary metabolite producers. Several large-scale studies have revealed the diverse biosynthetic potential of various genera like Streptomyces (77,78), Amycolatopsis (17), Salinispora (79), and others. In this study, we selected the Saccharopolyspora genus to demonstrate BGCFlow because of the following: (i) many secondary metabolites like erythromycin, spinosyn, and others produced by Saccharopolyspora strains are of great importance to the medicinal (erythromycin), agriculture (spinosyn), and food industry, for example in Chinese liquors (80–84), (ii) there are no comprehensive studies on genome mining across this underexplored genus (80,85), (iii) the size of the dataset was sufficiently large for demonstrating all the steps of the BGCFlow.
Saccharopolyspora is a multi-spored actinomycete genus that was first isolated from sugar cane bagasse in 1975 (86). Over the years, Saccharopolyspora species have been isolated from various natural habitats like soil, desert, fodder, marine sponges and tunicates, deep-sea sediments, salt lake, and stony corals (80). Currently, as many as 46 species (https://lpsn.dsmz.de/genus/saccharopolyspora) and up to 74 strains are reported in the DSMZ databases (87). In this study, we selected 42 genomes from the NCBI RefSeq database on 25 October 2022 belonging to the Saccharopolyspora genus with all assembly qualities (Data S1). The number of Saccharopolyspora genomes has increased significantly from 3 in 2012, 13 in 2017, to 42 in 2022 (Supplementary Figure S5). In the first stage of data curation and selection, we created a PEP with rules checkm, gtdbtk, and seqfu to access the information on the quality of the genome assemblies and phylogenetic classification (Data S1). Here, the 42 genomes were classified into three categories based on N50 and number of contigs: (a) 16 genomes of high-quality (N50 > 5 Mb), (b) 10 genomes of medium-quality (number of contigs < 50) and (c) 16 genomes of low-quality (number of contigs ≥ 50) (Supplementary Figure S5). The CheckM analysis showed that most assemblies are over 99% complete and under 4% contaminated (Supplementary Figure S5) (58). The GTDB-based taxonomic placement led to the reclassification of 42 genomes into >22 species belonging to three genera: Sacharopolyspora (27 genomes), Sacharopolyspora_C (8 genomes), and Sacharopolyspora_D (7 genomes) (Supplementary Figure S5)(60). The species assignment from NCBI to GTDB was updated for a few species; for example, S. endophytica, S. terrae and S. karakumensis were reclassified into one GTDB-species S. endophytica. A previous study based on 16S rRNA genes assigned these three as separate species while noting that they belong to a similar cluster (85). Reclassification of taxonomy based on GTDB provides a more structured basis for downstream comparative analysis.
For the next PEP example, we chose the subset of 26 genomes with medium to high-quality genomes (Data S2). As the number of species defined using GTDB was still higher for effective comparison, we used the MASH-based hierarchical clustermap to group the genomes into eight phylogenetic groups (P1 to P8) with the lowest k-means distance (Supplementary Figure S6). These phylogroups represented optimal clustering at the level between genus and species and were used in downstream visualizations. The genomic properties such as genome length, GC content, and number of BGCs were associated with the defined phylogroups (Figure 3). The genome length varied from 5.8 to 9.6 Mb with an average of 7.6 Mb, whereas the GC content varied from 68% to 73% with an average of 70%. The phylogroup P7 with four genomes of S. spinosa and S. pogona had the largest genomes and lowest GC content, along with a high number of BGCs. Similarly, the phylogroup P6 of S. erythrea also had larger genomes with a high number of BGCs and higher GC content. Saccharopolyspora hordei A54 isolated from fodder (88) had the minimum number of 13 BGCs in its ∼5.78 Mb-sized genome. Similarly, Saccharopolyspora rhizosphaerae H219 isolated from rhizosphere soil (89) had only 14 BGCs in its ∼5.82 Mb-sized genome. A more detailed phylogenetic tree was also constructed using autoMLST based on 30 common genes, which generally matches with the phylogroups as well. The number of BGCs across this phylogenetic tree was quite diverse (Figure 3). Thus, the selected dataset of 26 genomes and the phylogenetic tree were used in more specific comparative analysis in the subsequent stages.
Integrated genome mining analysis reveals the biosynthetic potential of Saccharopolyspora spp.
Here, various genome mining tools were used to predict BGCs and their association with databases such as MIBiG, BiG-FAM, and ARTS. The predicted mappings of BGCs against these different databases were used to reconstruct a treemap distribution (Figure 4A). Using antiSMASH, a total of 724 BGCs were predicted across 26 Saccharopolyspora genomes with a median of 25 BGCs per genome (Data S2). The BGCs were distributed across various types such as Saccharides (8 BGCs), PKS-NRP_Hybrids (37 BGCs), PKSI (45 BGCs), PKSother (60 BGCs), NRPS (82 BGCs), RiPPs (90 BGCs), Terpene (159 BGCs) and Others (243 BGCs). Based on the antiSMASH KnownClusterBlast similarity of greater than 80%, a total of 122 BGCs were mapped to the 16 MIBiG database entries of characterized secondary metabolites. Most common hits were geosmin (31 BGCs), ectoine (26 BGCs), 2-methylisoborneol (15 BGCs), and erythreapeptin (14 BGCs) which were found across multiple species. Whereas erythromycin (5 BGCs), flaviolin (5 BGCs), erythrochelin (5 BGCs), spinosyn (5 BGCs), and E-837 furanone (4 BGCs) were detected in specific species.
The comparison of BGCs against BiG-FAM can be used to investigate if detected BGCs are widely spread across other genomes from the public datasets. The BiG-SLICE-based query resulted in 391 BGCs having similarities against 131 GCF models from the BiG-FAM database (Data S3). From the 131 detected GCFs, there were 72 BiG-FAM GCFs that are specifically distributed in the genus Saccharopolyspora. Whereas several other GCFs included BGCs from different genera such as Streptomyces (47 GCFs), Amycolatopsis (31 GCFs), Kitasatospora (29 GCFs), Nocardia (25 GCFs), Pseudomonas_E (22 GCFs), and many others.
We further calculated the Shannon diversity index (H) for each of the GCFs representing the distribution of BGCs across different genera (Figure 4B). In this context, the Shannon index is used to measure the diversity of the taxa of the BGCs that belong to a certain BiG-FAM GCF. The Shannon diversity index is a metric for assessing biodiversity, calculated using the formula (⁠
⁠), where represents the proportion of each genus relative to the total member included in the BiG-FAM GCF model. A high Shannon index in a GCF indicates a diverse distribution of BGCs across different genera. Such GCFs might represent biosynthetic pathways that are more universally utilized across various bacterial species, suggesting a broad ecological or biochemical significance. Meanwhile, GCFs with a low Shannon index, indicating a concentration in one or a few genera, which might represent specialized biosynthetic pathways that have evolved to confer specific advantages or adaptations to those genera.
The maximum theoretical Shannon index at the genus level, based on the GTDB bacterial genus, is 9.86, calculated using the natural logarithm of the number of genera in the database (60). However, in practice, BiG-FAM models rarely exhibit a Shannon index above 5. It is also important to highlight that it is challenging to establish a cutoff that accurately groups diverse BGCs in a way that reflects their chemical similarity. Given the understanding that most BGCs are inherited vertically (18), one should consider the limitation of the clustering tool when analyzing GCFs with high Shannon values. Based on these limitations, the study focuses on exploratory analysis of BiG-FAM models with distribution in more than half of the genera they include, as these better represent the biological diversity of BGCs.
Of the 59 GCFs with positive Shannon index, 33 were highly distributed across many genera with a Shannon index of greater than 2. The GCF_201888 with the lowest positive Shannon index (∼0.3) contained 12,444 BGCs distributed across 43 genera with the majority belonging to Staphylococcus (∼94.2%) followed by Acinetobacter (∼4.2%). The known BGC in the BiG-FAM GCF_201888 coded for the biosynthesis of staphylobactin (also known as staphyloferrin B), which is a siderophore with a role in the virulence of Staphylococcus aureus (90,91). The detailed comparative analysis of the predicted BGCs against the MIBiG entry showed that the Saccharopolypora genomes indeed possess a BGC that is very similar to the staphylobactin BGC from Staphylococcus aureus (Supplementary Figure S7, Data S4). Further population genetic analysis with lsaBGC showed median beta-rd values below 1 for the two staphylobactin-like GCFs in Saccharopolyspora, suggesting that these GCFs are unlikely to be the result of horizontal gene transfer (Supplementary Figure S10) (39). Co-phylogenetic distribution of the BGCs across representative taxa members of the BiG-FAM GCF_201888 were conducted by comparing the genome tree of the species with the BGC tree build using getphylo (92). The analysis suggested that the BGCs appear to have been inherited early in the phylogenetic history of these species (Supplementary Figure S11). The getphylo picked up the orthologs of the sbnA and sbnB for the phylogenetic tree building. These two genes are responsible for the biosynthesis of L-2,3-diaminopropionic acid (Dap), the main precursor of staphyloferrin B (91). While Saccharopolyspora has not been experimentally shown to produce staphyloferrin B, the presence of these genes, along with reports of staphyloferrin B production in other genera like Ralstonia (93), suggests a broader distribution of this biosynthetic pathway beyond Staphylococcus.
Other than the BiG-FAM model GCF_201888, our analysis also revealed several other GCFs that encompass BGCs that are predominantly found in other genera. BiG-FAM models like GCF_215691 (Shannon index: 0.35), GCF_220008 (Shannon index: 0.41), and GCF_203048 (Shannon index: 0.52) were found predominantly in genera such as Pseudomonas_E (1,241 genomes), Mycobacterium (227 genomes), and Streptomyces (114 genomes), respectively (Figure 4B). The occurrence of these BGCs in various genera, apart from Saccharopolyspora, suggests a potential for broader distribution of these GCFs.
Many BGCs coding for known antibiotics also contain genes assisting in self-resistance. By looking for these resistance models, ARTS2 assists in prioritizing novel target screening with potential bioactivity. We detected 296 BGCs that had hits against 599 (130 unique) gene profiles from the ARTS model (Figure 4C, Data S3). The interaction network represented an overview of BGCs in proximity to the ARTS resistance gene models (19 unique) or the core genes models (111 unique) from different functional categories (Figure 4C). We found that 102 BGCs had hits against resistance genes and are more likely to have an antibiotic potential. We also noted that 64 of the 102 BGCs had no similarity to known clusters (either from antiSMASH KnownClusterBlast or BiG-SCAPE results), thus representing underexplored biosynthetic potential of the genus. This analysis further motivated an exploratory analysis of a set of BGCs of unknown function that shared proximity to the same ARTS gene model (17 BGCs), as represented in the last section of mycofactocin-like BGCs of this study.
Enrichment of the BGC network with knowledgebases revealed more accurate detection and dereplication of GCFs
In order to investigate the diverse biosynthetic potential, it is common to generate sequence-based similarity networks of BGCs that help in identifying distinct gene cluster families (GCFs). Clustering of the detected BGCs in Saccharopolyspora using BIG-SCAPE (0.3 cutoff on distance metric) resulted in 330 GCFs. Among these GCFs, only 5 contained known BGCs from the MIBiG database: erythromycin, spinosyn, antimycin, 2-methylisoborneol, and erythreapeptin (Figure 5A, C). It is challenging to select an optimal cutoff for defining the GCFs, and thus we evaluated 3 different cutoffs of 0.3, 0.4 and 0.5, respectively (Supplementary Figure S8). For this study, the selected cutoff is set to 0.3, which is conservative enough to avoid misleading connections with unrelated BGCs and MIBiG references, as demonstrated in less stringent cutoffs (Supplementary Figure S8). However, we missed many of the known cluster hits due to reasons such as some clusters being hybrid types or having unclear boundaries.
In this study, we leverage points of reference from available knowledgebases and tools to improve the dereplication accuracy of the GCFs. Our approach proposed within BGCFlow involved generating an extended graph where the BGCs were connected with additional nodes from external knowledgebases such as ARTS (gene profiles), antiSMASH KnownClusterBlast hits (MIBiG BGCs), and BiG-FAM (GCF models). The expanded network with information from antiSMASH KnownClusterBlast and BiG-SLICE similarity to BiG-FAM models was used to define more accurate GCFs. The ARTS gene profiles were not used to define the GCFs but can be used to navigate and prioritize GCFs with potentially similar bioactivities. Additionally, the different layers of knowledgebases enable a better explanation of the reason behind the clustering of GCFs.
The enriched network narrows down the 330 GCFs from BiG-SCAPE into 202 connected components with only 50 singletons (previously 209) (Data S3). Using KnownClusterBlast (>80% similarity) and matches to BiG-FAM models, we can assign 134 BGCs to 16 MIBiG entries, covering all known Saccharopolyspora BGCs and common BGCs such as geosmin and hopene. This information was missed using only the BiG-SCAPE network. One example of using this approach is highlighted by capturing the spinosyn GCF more accurately due to the connections from antiSMASH KnownClusterBlast hits, which were missed in BiG-SCAPE due to the variable boundary of hybrid clusters (Figure 5B, Supplementary Figure S1, Data S5). Another example included a more accurate definition and a deeper investigation erythreapeptin-like GCF, which was spread across six different BiG-SCAPE GCFs (Figure 6C). Overall, the enriched network can be used as a starting point for in-depth comparative analysis within specific GCFs as demonstrated in the next sections, where BGC comparison tools are used on these smaller PEP projects of each GCFs.
Distribution and sequence level variation across lanthipeptide GCFs
As an example of in-depth comparative BGCs analysis, we investigated the distribution of BGCs belonging to different types of lanthipeptides. Lanthipeptides consist of five diverse classes of ribosomally synthesized and post-translationally modified peptides (RiPPs) (94,95). Lanthipeptides are typically represented by peptides containing lanthionine bridges, which are post-translationally synthesized by linking the Cys thiol- and a dehydrated Ser hydroxy group. From the 121 RiPPs detected in the Saccharopolyspora genome dataset, we identified 58 BGCs of the various lanthipeptide classes namely class I (15 BGCs), class II (8 BGCs), class III (17 BGCs), class IV (17 BGCs) and class V (1 BGC) (Figure 6A). We found that different classes of lanthipeptides were predominant in specific phylogroups. For example, class II lanthipeptides were detected only in phylogroups P7 and P8. On the other hand, class I lanthipeptides were detected in all the other phylogroups except P7 and P8. The class IV lanthipeptides were predominant in phylogroups P1 and P8. The class III lanthipeptides were present in most but phylogroup P1 and P3. Interestingly, these class III lanthipeptides were spread across six different GCFs as per BiG-SCAPE but were detected as a single connected GCF based on the enriched network due to KnownClusterBlast similarity (Figure 6B).
We further carried out an in-depth exploratory analysis of the class III lanthipeptide GCF by defining a new PEP with BGC snakefile that used the BGCs of this GCF as samples and BGC alignment tools such as clinker (Data S6). We noted that most BGCs of this GCF contained all of the known biosynthetic genes for erythreapeptin (Figure 6C), a known lantibiotic produced by Saccharapolyspora (96). The only exception was a BGC in the phylogroup P6 which had the additional genes but was missing the core biosynthetic genes. We note that the additional genes were different in different phylogroups and thus explain the different GCFs detected using BiG-SCAPE. Finally, we also compared the amino acid sequence variations in the leader and the core peptides of the core gene eryS (Figure 6D). We note that the core peptide sequence is generally conserved across all phylogroups with some variations at specific positions. For example, the AA in the position 11 of the core peptide was N in phylogroups P7 and P8, A in P4, and Q or H in P2. We also note that the precursor peptide sequence also displayed variations across different phylogroups. Further experimental studies are required to assess if these variations will lead to lantibiotics with different activities.
Integrated genome mining leads to identification of mycofactocin-like BGCs in Saccharopolyspora
On top of known resistance gene models, ARTS2 reference set includes phylum-specific essential housekeeping genes (core models). Both models are checked for duplication, horizontal gene transfer and localization within a BGC, which signifies potential bioactivity (25). In this section, we carried out additional exploratory analysis for a selected subnetwork of 17 BGCs of ranthipeptide type with unknown functions. These 17 BGCs do not have a match through KnownClusterBlast and BiG-FAM, but all shared a hit against an ARTS2 core model TIGR03997 (Figure 7A). The TIGR03997 model was identified as a mycofactocin system oxidoreductase, a related biosynthetic component of a known redox cofactor in Mycobacterium tuberculosis (97). Even though this profile does not satisfy several ARTS criteria for self-resistance, it indicated that the detected BGCs might code for mycofactocin-like redox cofactors.
We did a further investigation into these 17 candidate BGCs by creating a new PEP with BGC snakefile (Data S7) and comparing the detected BGCs with a mycofactocin BGC from Mycobacterium tuberculosis. We found that the majority of the genes showed sequence similarities to at least six out of the seven genes involved in mycofactocin biosynthesis (Figure 7B and C), with the exception of mftD. Multiple sequence alignment of the candidate precursor peptides (mftA) exhibited the characteristic C-terminal pattern (IDGMCGVY) associated with mycofactocin (Figure 7D) (97). The missing gene signature (mftD) encodes an oxidoreductase (TIGR03966) that is required for the synthesis of pre-mycofactocin through oxidative deamination of 3-amino-5-[(p-hydroxyphenyl)methyl]-4,4-dimethyl-2-pyrrolidinone (AHDP) (97). The Saccharapolyspora BGCs contained a gene without signficant similarity to mftD but a hit against the ARTS profile TIGR03997, which is annotated as FadH/OYE family oxidoreductase with unknown function. Nevertheless, experimental evidence showed that S. erythraea is able to produce a methylated variant of mycofactocin (98). These findings strongly suggest that the investigated BGCs may be responsible for producing a compound that closely resembles mycofactocin, instead of a ranthipeptide as was initially discovered with the rule-based logic of antiSMASH. The classification discrepancy was likely due to the absence of the TIGR03966 (mftD) profile in the candidate BGCs, which are required by the antiSMASH version 6.1.1 rule to recognize redox cofactor BGCs. The missing profile then registers the BGC region as ranthipeptide, even though the clusters don’t seem to indicate the six Cys in forty-five residues (SCIFF) pattern in the precursor peptides (99). Hence, the BGCFlow framework provides a global overview and guidelines for investigating BGCs and GCFs in finer detail that can reveal more knowledge about the BGCs of interest.
Discussion
Genome mining tools like antiSMASH have revealed the significantly higher biosynthetic potential of various bacteria to produce novel secondary metabolites with various applications in medicine and industrial biotechnology (15). In recent years, the search for novel natural products with bioactivity is evolving from purely chemical and activity screening-based approaches to genome analysis-assisted discovery (14,101). This paradigm shift in the era of pangenome availability will require scientists to deploy comprehensive platforms to organize the large datasets, metadata, and results in a findable, accessible, interoperable, and reusable (FAIR) way. The data workflow management systems and databases provide effective solutions to organize large genome mining projects. Here, the BGCFlow demonstrates the first end-to-end analysis platform to unify large-scale BGC and genome data, increasing the support for FAIR data principles.
Currently, workflows such as AQUAMIS, ASA3P, TORMES, Bactopia, and others automate many of the ‘generic’ assembly, annotation, and pangenome analysis software (29,36–38), but provide no information on specialized metabolite BGCs. Many of the genome mining tools like antiSMASH, BiG-SCAPE and BiG-SLICE allow the detection of BGCs and GCFs, whereas databases like antiSMASH-DB, BiG-FAM, MIBiG provide precalculated BGCs, GCFs, or catalog of known BGCs (21,26–28,75,102). With a primary focus on integrating secondary/specialized metabolite genome mining resources under one platform, BGCFlow assists in automating the computational analysis in scalable, adaptable, reiterable fashion for various small to large-scale customized projects.
Particularly, any exploratory data analysis requires scientists to dynamically change the dataset, adding or removing samples and running different analytical tools as the investigation continues. The notebooks and the database provided here would be a starting point for many users to expand the exploratory analysis for the design of the study. Inspired by the cookiecutter data science project (https://drivendata.github.io/cookiecutter-data-science), BGCFlow data structure, combined with Snakemake, enables efficient re-use of data via input re-entries. While the notebooks are meant for flexible exploratory analysis, it is recommended to utilize the combined PEP configuration and Snakemake for reproducibility. On top of the main workflow, users can also utilize sub-workflows for direct comparison of BGCs (as demonstrated with examples of erythreapeptin and mycofactocin comparison) or write a custom pipeline.
Comparing BGCs and grouping them into functionally related GCFs remains a key challenge in genome mining studies (26,27,39,103–105). A BGC can be defined as a set of chromosomally adjacent genes which encode the necessary enzymes, regulatory proteins, and transporters for the production, processing, and export of specialized metabolites (106). In computational contexts, we define a BGC using the antiSMASH ‘region’ concept, which is a set of genes within the offset of cluster detection rules (107). On the other hand, a GCF comprises of BGCs sharing similar biosynthetic sequence profiles with the potential to produce similar compound or compound classes (26). Nevertheless, the definition of a GCF is heavily dependent on the clustering threshold set within sequence similarity comparison algorithms.
The accuracy of such comparisons can be influenced by several factors, depending on the scale and quality of the dataset. (i) Relying solely on gene sequence similarity for comparisons can lead to the grouping together of distinct BGCs that share repetitive sequences. (ii) Comparing hybrid regions of BGCs, which may contain multiple independent BGCs, can impact the assessment of similarity. (iii) The precise determination of BGC boundaries for comparison purposes is challenging. (iv) Poor assembly quality frequently results in BGCs being fragmented. (v) Effectively navigating and identifying relevant GCFs from a vast number of clusters demands the implementation of efficient prioritization strategies, as not all tools are equipped to handle larger datasets. By leveraging the knowledge extracted from antiSMASH KnownClusterBlast, MIBiG, BiG-SCAPE, BiG-FAM, and ARTS into an enriched sequence similarity network, BGCFlow enables the more accurate definition of GCFs and concise comparative analysis of BGCs.
As a case study, we ran the BGCFlow on a set of publicly available genomes of Saccharopolyspora genus, which is known to produce several industrially relevant natural products with still underexplored bioactive potential (80). Various steps of the analysis carried out on different subsets highlight the reiterable nature of BGCFlow analysis. The phylogenetic analysis provides a guideline for efficiently investigating the distribution of different BGCs across phylogroups, for example different classes of lanthipeptides. The calculated enriched similarity network of the BGCs with different genome mining resources improved classification of BGCs and GCFs compared to the individual tools. Our analysis revealed more accurate identification of spinosyn-like, erythreapeptin-like, and mycofactin-like GCFs through connections to KnownClusterBlast based MIBiG BGCs or ARTS profiles. For instance, when classifying spinosyn-like BGCs using BiG-SCAPE with a cutoff of 0.3, we encountered challenges due to multiple BGCs residing in the same genomic region, resulting in their classification into different GCFs. In another example, the integration of knowledge from ARTS allowed us to re-evaluate the antiSMASH rule-based classification of ranthipeptides. Our analysis uncovered 17 ranthipeptide BGCs actually resembling mycofactocin biosynthesis, a redox-cofactor type also recently identified to be produced by Saccharapolyspora (98). These findings highlight the importance of not only integration but also the need to carefully evaluate accuracy of each predicted GCF as per the case. While literature curated databases like MIBIG are valuable resources, they may still contain incomplete entries and significant gaps to current knowledge, especially considering the ever-growing volume of publications in the natural product field.
Despite several advances in genome mining tools over the last decade, it is important to note that many of the BGC related analyses and predictions still require experimental validations. Therefore, it is crucial to exercise caution and critically interpret the data-driven predictions. Nevertheless, analyzing large genomic datasets such as the BiG-FAM database, even with domain knowledge expertise, presents challenges due to variations in data quality, software versions, and database inconsistencies. To address these issues, BGCFlow aims to provide a scalable, explorable and reproducible platform for integrated genome mining analysis. By following workflow standards and incorporating data engineering best practices, BGCFlow provides a dynamic environment that facilitates not only the execution of various analysis tools but also enables critical exploratory analysis of BGCs at different scales of pangenome-level, BGC-level, and sequence-level. Thus, we expect that the BGCFlow will streamline the research process along with facilitating collaboration and knowledge sharing among researchers working in the genome mining field.